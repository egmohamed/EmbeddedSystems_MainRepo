
My project slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086a  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006dc  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b8  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d3  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fc  00000000  00000000  00001c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_vInit>:
 */ 
#include "std_macros.h"
#include <avr/io.h>
#include "ADC.h"
void ADC_vInit(){
	SET_BIT(ADMUX,REFS0); // choose Vref (AVCC)
  6c:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADCSRA,ADPS1); // choose clock (8MHz/64)
  6e:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADEN); // Enable ADC
  70:	37 9a       	sbi	0x06, 7	; 6
  72:	08 95       	ret

00000074 <ADC_u16startConversion>:
	
}
unsigned short ADC_u16startConversion(){
	SET_BIT(ADCSRA,ADSC); // start conversion 
  74:	36 9a       	sbi	0x06, 6	; 6
	unsigned short op_Result;
	while(READ_BIT(ADCSRA,ADIF) == 0){
  76:	34 9b       	sbis	0x06, 4	; 6
  78:	fe cf       	rjmp	.-4      	; 0x76 <ADC_u16startConversion+0x2>
		
	}
	op_Result |= ADCL;
  7a:	84 b1       	in	r24, 0x04	; 4

	op_Result |= (unsigned short)(ADCH<<8);
  7c:	25 b1       	in	r18, 0x05	; 5
	
	return op_Result;
  7e:	90 e0       	ldi	r25, 0x00	; 0
	
  80:	92 2b       	or	r25, r18
  82:	08 95       	ret

00000084 <main>:

int main(void)
{
/*  Initializations  */
			
	DDRA |= 0x3F;
  84:	8a b3       	in	r24, 0x1a	; 26
  86:	8f 63       	ori	r24, 0x3F	; 63
  88:	8a bb       	out	0x1a, r24	; 26
	SPI_vSlaveInit();
  8a:	0e 94 ac 00 	call	0x158	; 0x158 <SPI_vSlaveInit>
	ADC_vInit();
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_vInit>
	
/***********************************/
	
    while (1) 
    {
		v_ReadingCompare();
  92:	0e 94 4c 00 	call	0x98	; 0x98 <v_ReadingCompare>
  96:	fd cf       	rjmp	.-6      	; 0x92 <main+0xe>

00000098 <v_ReadingCompare>:
 #include "Slave_header.h"

/*  Take action function  */

 void v_ReadingCompare(void)
 {
  98:	cf 93       	push	r28
	u8 read_spi_value;
	u16 read_ADC_value;
	
	read_spi_value = SPI_u8SlaveRead();
  9a:	0e 94 af 00 	call	0x15e	; 0x15e <SPI_u8SlaveRead>
  9e:	c8 2f       	mov	r28, r24
	read_ADC_value = ADC_u16startConversion();
  a0:	0e 94 3a 00 	call	0x74	; 0x74 <ADC_u16startConversion>

	if(read_ADC_value/2 <= 24) read_ADC_value = read_ADC_value/2;			// after divide adc values by two to convert to temperature degrees,
  a4:	82 33       	cpi	r24, 0x32	; 50
  a6:	91 05       	cpc	r25, r1
  a8:	18 f4       	brcc	.+6      	; 0xb0 <v_ReadingCompare+0x18>
  aa:	96 95       	lsr	r25
  ac:	87 95       	ror	r24
  ae:	25 c0       	rjmp	.+74     	; 0xfa <v_ReadingCompare+0x62>
																		    // noted that values are increasing in ascending manner by one after
																			// certain values so we handle them to get the right degrees

	else if((read_ADC_value/2) >24 && (read_ADC_value/2) <= 61) read_ADC_value = read_ADC_value/2 -1;
  b0:	9c 01       	movw	r18, r24
  b2:	22 53       	subi	r18, 0x32	; 50
  b4:	31 09       	sbc	r19, r1
  b6:	2a 34       	cpi	r18, 0x4A	; 74
  b8:	31 05       	cpc	r19, r1
  ba:	20 f4       	brcc	.+8      	; 0xc4 <v_ReadingCompare+0x2c>
  bc:	96 95       	lsr	r25
  be:	87 95       	ror	r24
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	1b c0       	rjmp	.+54     	; 0xfa <v_ReadingCompare+0x62>
	else if((read_ADC_value/2) >61 && (read_ADC_value/2) <=99)  read_ADC_value = read_ADC_value/2 -2;
  c4:	9c 01       	movw	r18, r24
  c6:	2c 57       	subi	r18, 0x7C	; 124
  c8:	31 09       	sbc	r19, r1
  ca:	2c 34       	cpi	r18, 0x4C	; 76
  cc:	31 05       	cpc	r19, r1
  ce:	20 f4       	brcc	.+8      	; 0xd8 <v_ReadingCompare+0x40>
  d0:	96 95       	lsr	r25
  d2:	87 95       	ror	r24
  d4:	02 97       	sbiw	r24, 0x02	; 2
  d6:	11 c0       	rjmp	.+34     	; 0xfa <v_ReadingCompare+0x62>
	else if((read_ADC_value/2) >99 && (read_ADC_value/2) <=137) read_ADC_value = read_ADC_value/2 -3;
  d8:	9c 01       	movw	r18, r24
  da:	28 5c       	subi	r18, 0xC8	; 200
  dc:	31 09       	sbc	r19, r1
  de:	2c 34       	cpi	r18, 0x4C	; 76
  e0:	31 05       	cpc	r19, r1
  e2:	20 f4       	brcc	.+8      	; 0xec <v_ReadingCompare+0x54>
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	03 97       	sbiw	r24, 0x03	; 3
  ea:	07 c0       	rjmp	.+14     	; 0xfa <v_ReadingCompare+0x62>
	else if(read_ADC_value/2 >137) read_ADC_value = read_ADC_value/2 -4;
  ec:	84 31       	cpi	r24, 0x14	; 20
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	92 07       	cpc	r25, r18
  f2:	18 f0       	brcs	.+6      	; 0xfa <v_ReadingCompare+0x62>
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
  f8:	04 97       	sbiw	r24, 0x04	; 4
	
	if(read_spi_value<read_ADC_value)										// if remote degree is lesser than room temperature 
  fa:	2c 2f       	mov	r18, r28
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	08 f4       	brcc	.+2      	; 0x106 <v_ReadingCompare+0x6e>
	{
		
		SET_BIT(PORTA,5);
 104:	dd 9a       	sbi	0x1b, 5	; 27
	}
	if(read_spi_value>read_ADC_value)
 106:	82 17       	cp	r24, r18
 108:	93 07       	cpc	r25, r19
 10a:	08 f4       	brcc	.+2      	; 0x10e <v_ReadingCompare+0x76>
	{
		CLEAR_BIT(PORTA,5);
 10c:	dd 98       	cbi	0x1b, 5	; 27
	else
	{
		//do nothing
	}
	
	if(read_spi_value==101)													// upcoming spi values sent to control leds,tv and air conditioner 
 10e:	c5 36       	cpi	r28, 0x65	; 101
 110:	11 f4       	brne	.+4      	; 0x116 <v_ReadingCompare+0x7e>
	{
		CLEAR_BIT(PORTA,4);
 112:	dc 98       	cbi	0x1b, 4	; 27
 114:	1f c0       	rjmp	.+62     	; 0x154 <v_ReadingCompare+0xbc>
	}
	else if(read_spi_value==102)
 116:	c6 36       	cpi	r28, 0x66	; 102
 118:	11 f4       	brne	.+4      	; 0x11e <v_ReadingCompare+0x86>
	{
		SET_BIT(PORTA,4);
 11a:	dc 9a       	sbi	0x1b, 4	; 27
 11c:	1b c0       	rjmp	.+54     	; 0x154 <v_ReadingCompare+0xbc>
	}
	else if(read_spi_value==103)
 11e:	c7 36       	cpi	r28, 0x67	; 103
 120:	11 f4       	brne	.+4      	; 0x126 <v_ReadingCompare+0x8e>
	{
		CLEAR_BIT(PORTA,3);
 122:	db 98       	cbi	0x1b, 3	; 27
 124:	17 c0       	rjmp	.+46     	; 0x154 <v_ReadingCompare+0xbc>
	}
	else if(read_spi_value==104)
 126:	c8 36       	cpi	r28, 0x68	; 104
 128:	11 f4       	brne	.+4      	; 0x12e <v_ReadingCompare+0x96>
	{
		SET_BIT(PORTA,3);
 12a:	db 9a       	sbi	0x1b, 3	; 27
 12c:	13 c0       	rjmp	.+38     	; 0x154 <v_ReadingCompare+0xbc>
	}
	else if(read_spi_value==105)
 12e:	c9 36       	cpi	r28, 0x69	; 105
 130:	11 f4       	brne	.+4      	; 0x136 <v_ReadingCompare+0x9e>
	{
		CLEAR_BIT(PORTA,2);
 132:	da 98       	cbi	0x1b, 2	; 27
 134:	0f c0       	rjmp	.+30     	; 0x154 <v_ReadingCompare+0xbc>
	}
	else if(read_spi_value==106)
 136:	ca 36       	cpi	r28, 0x6A	; 106
 138:	11 f4       	brne	.+4      	; 0x13e <v_ReadingCompare+0xa6>
	{
		SET_BIT(PORTA,2);
 13a:	da 9a       	sbi	0x1b, 2	; 27
 13c:	0b c0       	rjmp	.+22     	; 0x154 <v_ReadingCompare+0xbc>
	}
	else if(read_spi_value==107)
 13e:	cb 36       	cpi	r28, 0x6B	; 107
 140:	11 f4       	brne	.+4      	; 0x146 <v_ReadingCompare+0xae>
	{
		CLEAR_BIT(PORTA,1);
 142:	d9 98       	cbi	0x1b, 1	; 27
 144:	07 c0       	rjmp	.+14     	; 0x154 <v_ReadingCompare+0xbc>
	}
	else if(read_spi_value==108)
 146:	cc 36       	cpi	r28, 0x6C	; 108
 148:	11 f4       	brne	.+4      	; 0x14e <v_ReadingCompare+0xb6>
	{
		SET_BIT(PORTA,1);
 14a:	d9 9a       	sbi	0x1b, 1	; 27
 14c:	03 c0       	rjmp	.+6      	; 0x154 <v_ReadingCompare+0xbc>
	}
	else if(read_spi_value==109)
 14e:	cd 36       	cpi	r28, 0x6D	; 109
 150:	09 f4       	brne	.+2      	; 0x154 <v_ReadingCompare+0xbc>
	{
		CLEAR_BIT(PORTA,0);
 152:	d8 98       	cbi	0x1b, 0	; 27
	}
 }
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <SPI_vSlaveInit>:
	SPDR=data;
	while(READ_BIT(SPSR,SPIF)==0)		//make sure that the data has been sent
	{
		
	}
	SET_BIT(PORTB,SS);
 158:	6e 9a       	sbi	0x0d, 6	; 13
 15a:	be 9a       	sbi	0x17, 6	; 23
 15c:	08 95       	ret

0000015e <SPI_u8SlaveRead>:
}
u8 SPI_u8SlaveRead()
{
	while(READ_BIT(SPSR,SPIF)==0)		//wait until data is received in SPI register
 15e:	77 9b       	sbis	0x0e, 7	; 14
 160:	fe cf       	rjmp	.-4      	; 0x15e <SPI_u8SlaveRead>
	{
		
	}
	return SPDR;
 162:	8f b1       	in	r24, 0x0f	; 15
}
 164:	08 95       	ret

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
